// Code generated by mockery v2.35.3. DO NOT EDIT.

package mocks

import (
	freedns "github.com/ramalhais/go-freedns"
	mock "github.com/stretchr/testify/mock"
)

// DnsHost is an autogenerated mock type for the DnsHost type
type DnsHost struct {
	mock.Mock
}

// CreateRecord provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *DnsHost) CreateRecord(_a0 string, _a1 string, _a2 string, _a3 string, _a4 string) error {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRecord provides a mock function with given fields: _a0
func (_m *DnsHost) DeleteRecord(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindRecordIds provides a mock function with given fields: _a0, _a1
func (_m *DnsHost) FindRecordIds(_a0 map[string]freedns.Record, _a1 string) ([]string, bool) {
	ret := _m.Called(_a0, _a1)

	var r0 []string
	var r1 bool
	if rf, ok := ret.Get(0).(func(map[string]freedns.Record, string) ([]string, bool)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(map[string]freedns.Record, string) []string); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]freedns.Record, string) bool); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetDomains provides a mock function with given fields:
func (_m *DnsHost) GetDomains() (map[string]string, map[string]string, error) {
	ret := _m.Called()

	var r0 map[string]string
	var r1 map[string]string
	var r2 error
	if rf, ok := ret.Get(0).(func() (map[string]string, map[string]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func() map[string]string); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRecords provides a mock function with given fields: _a0
func (_m *DnsHost) GetRecords(_a0 string) (map[string]freedns.Record, error) {
	ret := _m.Called(_a0)

	var r0 map[string]freedns.Record
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]freedns.Record, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]freedns.Record); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]freedns.Record)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDnsHost creates a new instance of DnsHost. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDnsHost(t interface {
	mock.TestingT
	Cleanup(func())
}) *DnsHost {
	mock := &DnsHost{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
